print(paste("Run k-means using 10, the number of actual Quality groups.  Additionally run k-means with cluster sizes..."))
print(topCLust_wine_Rec$Var1 )
repeat {
topCLust_wine_Rec <- rbind(topCLust_wine_Rec, recClust_wine[recClust_wine$Freq == max(recClust_wine$Freq),])
recClust_wine <- recClust_wine[!recClust_wine$Freq == max(recClust_wine$Freq),]
print(nrow(topCLust_wine_Rec))
if (nrow(topCLust_wine_Rec) >= 2) {break}
}
topCLust_wine_Rec = data.frame()
recClust_wine <-data.frame(table(numClust_wine$Best.n[1,]))
str(recClust_wine)
recClust_wine$Var1 <- as.integer(recClust_wine$Var1)
#find the two most strongly recomended cluster sizes (based on index count)
topCLust_wine_Rec = data.frame()
repeat {
topCLust_wine_Rec <- rbind(topCLust_wine_Rec, recClust_wine[recClust_wine$Freq == max(recClust_wine$Freq),])
recClust_wine <- recClust_wine[!recClust_wine$Freq == max(recClust_wine$Freq),]
print(nrow(topCLust_wine_Rec))
if (nrow(topCLust_wine_Rec) >= 2) {break}
}
print(paste("Run k-means using 10, the number of actual Quality groups.  Additionally run k-means with cluster sizes..."))
print(topCLust_wine_Rec$Var1 )
k_wine_10 <- kmeans(wine_train, 10)
k_wine_1 <- kmeans(wine_train, topCLust_wine_Rec$Var1[1])
k_wine_2 <- kmeans(wine_train, topCLust_wine_Rec$Var1[2])
table(wine[,12])
table(k_wine_10$cluster, wine[,12])
table(k_wine_1$cluster, wine[,12])
table(k_wine_2$cluster, wine[,12])
table(wine[,12])
table(k_wine_1$cluster, wine[,12])
table(k_wine_2$cluster, wine[,12])
names(wine)
library(DBI)
library(odbc)
driver = "ODBC Driver 13 for SQL Server"
server = "advr.database.windows.net"
database = "advr"
uid = "lockedata"
pwd = "zll+.?=g8JA11111"
dbConn <- dbConnect(odbc(), driver = driver, server = server, database = database,
uid = uid, pwd = pwd)
install.packages("DBI")
install.packages("DBI")
install.packages("odbc")
clust_mtcars <- hclust(dist_mtcars, method = "complete")
library(odbc)plot(clust_mtcars, main = "Hierarchical clustering for mtcars dataset")
summary(iris)rect.hclust(clust_mtcars, k=3, border = "red")
iris <- dbReadTable(dbConn, "chicagofood.csv")
require(DBI)
require(odbc)
driver = "ODBC Driver 13 for SQL Server"
server = "advr.database.windows.net"
database = "advr"
uid = "lockedata"
pwd = "zll+.?=g8JA11111"
dbConn <- dbConnect(odbc(), driver = driver, server = server, database = database,
uid = uid, pwd = pwd)
iris <- dbReadTable(dbConn, "chicagofood.csv")
summary(iris)
iris <- dbReadTable(dbConn, "chicagofood")
head(iris)
rm(list=list())
rm(list=list()install.packages("DBI")
install.packages("odbc")
require(DBI)
require(odbc)
driver = "ODBC Driver 13 for SQL Server"
server = "advr.database.windows.net"
database = "advr"
uid = "lockedata"
pwd = "zll+.?=g8JA11111"
dbConn <- dbConnect(odbc(), driver = driver, server = server, database = database,
uid = uid, pwd = pwd)
iris <- dbReadTable(dbConn, "chicagofood")
summary(iris))
install.packages("odbc")
require(odbc)
str(wine_train)
str(wine_train)
temp$hclust_sing <- temp1$
str(temp)
ls()
library(NbClust)
library(tictoc)
library(beepr)
library(flexclust)
library(corrplot)
library(dendextend)
library(ggplot2)
wine <- read.csv("https://github.com/jaewilson07/Hello-World/raw/master/Data%20Mining%20Coursework/Whitewine.csv")
str(wine)
#Convert the Quality variable into an Ordinal Factor
qual_levels <- c(1:10)
wine$quality	<-factor(wine$quality, levels = qual_levels, ordered = TRUE)
#view the distribution of Quality in the existing dataset
ggplot(wine, aes(x = quality)) +
geom_bar()
#isolate the quality columns
wine_quality <- wine$quality
#scale the data set
wine_train <- wine[,-12]
wine_train <- as.data.frame(scale(wine_train))
paste(
c("Run k-means using 7, the number of represented Quality groups.  Additionally run k-means with the following cluster sizes"
, topClust_Wine_Rec[1]
, topClust_Wine_Rec[2] ), collapse = ", ")
#find recommendation for best number of clusters
tic()
numClust_wine <- NbClust(wine_train, method = "kmeans", min.nc =  2, max.nc = 7)
knitr::opts_chunk$set(echo = TRUE)
library(NbClust)
library(tictoc)
library(beepr)
library(flexclust)
library(corrplot)
library(dendextend)
library(ggplot2)
wine <- read.csv("https://github.com/jaewilson07/Hello-World/raw/master/Data%20Mining%20Coursework/Whitewine.csv")
#find recommendation for best number of clusters
tic()
numClust_wine <- NbClust(wine_train, method = "kmeans", min.nc =  2, max.nc = 7)
beep()
#store duration of NBClust
t_clust<- toc()
t_clust
#numClust_wine$Best.n[1,] stores a list of the number clusters recommended by each index
#find the top two (mode) wine cluster recommendations
topClust_Wine_Rec <- as.numeric(names(sort(-table(numClust_wine$Best.n[1,])))[1:2])
topClust_Wine_Rec
paste(
c("Run k-means using 7, the number of represented Quality groups.  Additionally run k-means with the following cluster sizes"
, topClust_Wine_Rec[1]
, topClust_Wine_Rec[2] ), collapse = ", ")
k_wine_10 <- kmeans(wine_train, 7)
k_wine_1 <- kmeans(wine_train, topClust_Wine_Rec[1])
k_wine_2 <- kmeans(wine_train, topClust_Wine_Rec[2])
tbwine <- table(wine[,12])
tb_ct_10 <- table(k_wine_10$cluster, wine[,12])
tb_ct_1 <- table(k_wine_1$cluster, wine[,12])
tb_ct_2 <- table(k_wine_2$cluster, wine[,12])
randIndex(tb_ct_10)
randIndex(tb_ct_1)
randIndex(tb_ct_2)
#hclust (agglomerative) single
hclust_sing <- hclust( dist(wine_train), method= "single")
dend_sing <- as.dendrogram(hclust_sing)
#hclust complete
hclust_compl <- hclust( dist(wine_train), method= "complete")
dend_compl <- as.dendrogram(hclust_compl)
#hclustaverage methods
hclust_avg <- hclust( dist(wine_train), method= "average")
dend_avg <- as.dendrogram(hclust_avg)
#Create dendogram visualization of all 3
layout(matrix(c(1:3),1,3))
plot(hclust_sing)
plot(hclust_compl)
plot(hclust_avg)
#cut the dendrograms and bind them to the wine_train dataset
wine_train$hclust_sing <- as.factor(
cutree(hclust_sing, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE))
wine_train$hclust_compl <- as.factor(
cutree(hclust_compl, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE))
wine_train$hclust_avg <- as.factor(
cutree(hclust_avg, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE))
str(wine_train)
temp$hclust_sing <- temp1$
str(temp)
knitr::opts_chunk$set(echo = TRUE)
library(NbClust)
library(tictoc)
library(beepr)
library(flexclust)
library(corrplot)
library(dendextend)
library(ggplot2)
wine <- read.csv("https://github.com/jaewilson07/Hello-World/raw/master/Data%20Mining%20Coursework/Whitewine.csv")
#cut the dendrograms and bind them to the wine_train dataset
wine_train$hclust_sing <- as.factor(
cutree(hclust_sing, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE))
wine_train$hclust_compl <- as.factor(
cutree(hclust_compl, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE))
wine_train$hclust_avg <- as.factor(
cutree(hclust_avg, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE))
str(wine_train)
cutclust_compl <- cutree(hclust_compl, k= 1:10)
cutclust_avg <- cutree(hclust_avg, k= 1:10)
plot(cutclust_sing)
knitr::opts_chunk$set(echo = TRUE)
library(NbClust)
library(tictoc)
library(beepr)
library(flexclust)
library(corrplot)
library(dendextend)
library(ggplot2)
wine <- read.csv("https://github.com/jaewilson07/Hello-World/raw/master/Data%20Mining%20Coursework/Whitewine.csv")
#cut the dendrograms and bind them to the wine_train dataset
wine_train$hclust_sing <- as.factor(
cutree(hclust_sing, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE))
wine_train$hclust_compl <- as.factor(
cutree(hclust_compl, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE))
wine_train$hclust_avg <- as.factor(
cutree(hclust_avg, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE))
str(wine_train)
cutclust_sing <- cutree(hclust_sing, k = 1:10)
cutclust_compl <- cutree(hclust_compl, k= 1:10)
cutclust_avg <- cutree(hclust_avg, k= 1:10)
plot(cutclust_sing)
plot(cutclust_compl)
plot(cutclust_avg)
#create a list of dendgrams
d <- dendlist(
single = dend_sing,
complete = dend_compl,
average = dend_avg)
#cor.dendlist between each clustering result
cor.dendlist(d)
rm(d)
rm(dend_avag)
rm(dend_avg)
rm(dend_compl)
rm(dend_sing)
knitr::opts_chunk$set(echo = TRUE)
library(NbClust)
library(tictoc)
library(beepr)
library(flexclust)
library(corrplot)
library(dendextend)
library(ggplot2)
wine <- read.csv("https://github.com/jaewilson07/Hello-World/raw/master/Data%20Mining%20Coursework/Whitewine.csv")
#cut the dendrograms and bind them to the wine_train dataset
cutclust_sing <- cutree(hclust_sing, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE)
cutclust_compl <-  cutree(hclust_compl, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE)
cutclust_avg <-  cutree(hclust_avg, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE)
wine_train$hclust_sing <- as.factor(cutclust_sing)
wine_train$hclust_compl <- as.factor(cutclust_compl)
wine_train$hclust_avg <- as.factor(cutclust_avg)
plot(cutclust_sing)
plot(cutclust_compl)
plot(cutclust_avg)
#create a list of dendgrams
d <- dendlist(
single = dend_sing,
complete = dend_compl,
average = dend_avg)
knitr::opts_chunk$set(echo = TRUE)
library(NbClust)
library(tictoc)
library(beepr)
library(flexclust)
library(corrplot)
library(dendextend)
library(ggplot2)
wine <- read.csv("https://github.com/jaewilson07/Hello-World/raw/master/Data%20Mining%20Coursework/Whitewine.csv")
#cut the dendrograms and bind them to the wine_train dataset
cutclust_sing <- cutree(hclust_sing, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE)
cutclust_compl <-  cutree(hclust_compl, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE)
cutclust_avg <-  cutree(hclust_avg, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE)
wine_train$hclust_sing <- as.factor(cutclust_sing)
wine_train$hclust_compl <- as.factor(cutclust_compl)
wine_train$hclust_avg <- as.factor(cutclust_avg)
plot(cutclust_sing)
plot(cutclust_compl)
plot(cutclust_avg)
#create a list of dendgrams
d <- dendlist(
single = cutclust_sing,
complete = cutclust_compl,
average = cutclust_avg)
knitr::opts_chunk$set(echo = TRUE)
library(NbClust)
library(tictoc)
library(beepr)
library(flexclust)
library(corrplot)
library(dendextend)
library(ggplot2)
wine <- read.csv("https://github.com/jaewilson07/Hello-World/raw/master/Data%20Mining%20Coursework/Whitewine.csv")
class(cutclust_sing)
knitr::opts_chunk$set(echo = TRUE)
library(NbClust)
library(tictoc)
library(beepr)
library(flexclust)
library(corrplot)
library(dendextend)
library(ggplot2)
wine <- read.csv("https://github.com/jaewilson07/Hello-World/raw/master/Data%20Mining%20Coursework/Whitewine.csv")
head(wine_train)
head(wine_train)
str(wine_train)
class(cutree(hclust_avg, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE))
class(cutree(hclust_avg, k = topClust_Wine_Rec[2])
class(cutree(hclust_avg, k = topClust_Wine_Rec[2])
))
class(cutree(hclust_avg, k = topClust_Wine_Rec[2]))
class(hclust_sing)
class(as.dendrogram(hclust_sing))
knitr::opts_chunk$set(echo = TRUE)
library(NbClust)
library(tictoc)
library(beepr)
library(flexclust)
library(corrplot)
library(dendextend)
library(ggplot2)
wine <- read.csv("https://github.com/jaewilson07/Hello-World/raw/master/Data%20Mining%20Coursework/Whitewine.csv")
#hclust (agglomerative) single
hclust_sing <- hclust( dist(wine_train), method= "single")
dend_sing <- as.dendrogram(hclust_sing)
#hclust complete
hclust_compl <- hclust( dist(wine_train), method= "complete")
dend_compl <- as.dendrogram(hclust_compl)
#hclustaverage methods
hclust_avg <- hclust( dist(wine_train), method= "average")
dend_avg <- as.dendrogram(hclust_avg)
#Create dendogram visualization of all 3
layout(matrix(c(1:3),1,3))
plot(hclust_sing)
plot(hclust_compl)
plot(hclust_avg)
knitr::opts_chunk$set(echo = TRUE)
library(NbClust)
library(tictoc)
library(beepr)
library(flexclust)
library(corrplot)
library(dendextend)
library(ggplot2)
wine <- read.csv("https://github.com/jaewilson07/Hello-World/raw/master/Data%20Mining%20Coursework/Whitewine.csv")
#cut the dendrograms and bind them to the wine_train dataset
cutclust_sing <- cutree(hclust_sing, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE)
cutclust_compl <-  cutree(hclust_compl, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE)
cutclust_avg <-  cutree(hclust_avg, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE)
wine_train$hclust_sing <- as.factor(cutclust_sing)
wine_train$hclust_compl <- as.factor(cutclust_compl)
wine_train$hclust_avg <- as.factor(cutclust_avg)
plot(cutclust_sing)
plot(cutclust_compl)
plot(cutclust_avg)
#create a list of dendgrams
d <- dendlist(
single = dend_sing,
complete = dend_compl,
average = dend_avg)
#cor.dendlist between each clustering result
cor.dendlist(d)
knitr::opts_chunk$set(echo = TRUE)
library(NbClust)
library(tictoc)
library(beepr)
library(flexclust)
library(corrplot)
library(dendextend)
library(ggplot2)
wine <- read.csv("https://github.com/jaewilson07/Hello-World/raw/master/Data%20Mining%20Coursework/Whitewine.csv")
cor.dendlist(d, "cophenetic")
knitr::opts_chunk$set(echo = TRUE)
library(NbClust)
library(tictoc)
library(beepr)
library(flexclust)
library(corrplot)
library(dendextend)
library(ggplot2)
library(magrittr)
wine <- read.csv("https://github.com/jaewilson07/Hello-World/raw/master/Data%20Mining%20Coursework/Whitewine.csv")
#cut the dendrograms and bind them to the wine_train dataset
cutclust_sing <- cutree(hclust_sing, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE)
cutclust_compl <-  cutree(hclust_compl, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE)
cutclust_avg <-  cutree(hclust_avg, k = topClust_Wine_Rec[2], order_clusters_as_data =  FALSE)
wine_train$hclust_sing <- as.factor(cutclust_sing)
wine_train$hclust_compl <- as.factor(cutclust_compl)
wine_train$hclust_avg <- as.factor(cutclust_avg)
plot(cutclust_sing)
plot(cutclust_compl)
plot(cutclust_avg)
#create a list of dendgrams
d <- dendlist(
single = dend_sing,
complete = dend_compl,
average = dend_avg)
#cor.dendlist between each clustering result
tic("dend")
cor.dendlist(d, "cophenetic")
install.packages("e1071")
read.csv("https://raw.githubusercontent.com/jaewilson07/Hello-World/master/Datasets/DM%20and%20A/redwine.csv", stringsAsFactors = FALSE)
wine_df <- read.csv("https://raw.githubusercontent.com/jaewilson07/Hello-World/master/Datasets/DM%20and%20A/redwine.csv", stringsAsFactors = FALSE)
str(wine_df)
str(wine_df)
wine_df <- read.csv("https://raw.githubusercontent.com/jaewilson07/Hello-World/master/Datasets/DM%20and%20A/redwine.csv", stringsAsFactors = FALSE) %>%
as.facctor(wine_df$quality)
library("dplyr")
wine_df <- read.csv("https://raw.githubusercontent.com/jaewilson07/Hello-World/master/Datasets/DM%20and%20A/redwine.csv", stringsAsFactors = FALSE) %>%
as.facctor(wine_df$quality)
wine_df <- read.csv("https://raw.githubusercontent.com/jaewilson07/Hello-World/master/Datasets/DM%20and%20A/redwine.csv", stringsAsFactors = FALSE) %>%
as.factor(wine_df$quality)
wine_df <- read.csv("https://raw.githubusercontent.com/jaewilson07/Hello-World/master/Datasets/DM%20and%20A/redwine.csv", stringsAsFactors = FALSE) %>%
quality <- as.factor()
wine_df <- read.csv("https://raw.githubusercontent.com/jaewilson07/Hello-World/master/Datasets/DM%20and%20A/redwine.csv", stringsAsFactors = FALSE) %>%
quality <- as.factor(quality)
wine_df$quality <- as.factor(wine_df$quality)
wine_df <- read.csv("https://raw.githubusercontent.com/jaewilson07/Hello-World/master/Datasets/DM%20and%20A/redwine.csv", stringsAsFactors = FALSE)
wine_df$quality <- as.factor(wine_df$quality)
str(wine_df)
iris <- iris
str(iris)
n =
nrow(iris)
n = 125
iris_train <- iris[1:n, -5]
str(iris_train)
iris_train_pred <- iris[1:n, 5]
str(iris_train_pred)
iris_svm <- svm(Species ~ . , data = iris)
#minstall.packages("e1071")
library("e1071")
iris_svm <- svm(Species ~ . , data = iris)
summary(iris_svm)
iris_svm2 <- svm(iris_train, iris_train_pred)
summary(iris_svm2)
iris_test <- iris[n+1, -5]
str(iris_test)
iris_test <- iris[n+1: nrow(iris), -5]
iris_test <- iris[ (n+1): nrow(iris), -5]
iris_svm_pred <- predict(iris_svm, iris_test)
tic()
iris_svm_pred <- predict(iris_svm, iris_test)
toc("svm_pred")
library("tictoc")
tic()
iris_svm_pred <- predict(iris_svm, iris_test)
toc("svm_pred")
tic("svm_pred")
iris_svm_pred <- predict(iris_svm, iris_test)
toc("svm_pred")
toc()
tic("svm_pred")
iris_svm_pred <- predict(iris_svm, iris_test)
toc()
svm_pred <- toc()
tic("svm_pred")
iris_svm_pred <- predict(iris_svm, iris_test)
svm_pred <- toc()
svm_pred
str(iris)
str(iris_train)
str(iris_train_pred)
str(iris_test)
iris_svm <- svm(Species ~ . , data = iris)
summary(iris_svm)
iris_svm2 <- svm(iris_train, iris_train_pred)
summary(iris_svm2)
tic("svm_pred")
iris_svm_pred <- predict(iris_svm, iris_test)
toc_pred <- toc()
iris <- iris
iris_train <- iris[1:n, -5]
iris_train_pred <- iris[1:n, 5]
iris_test <- iris[ (n+1): nrow(iris), -5]
str(iris)
str(iris_train)
str(iris_train_pred)
str(iris_test)
iris_svm <- svm(Species ~ . , data = iris)
summary(iris_svm)
iris_svm2 <- svm(iris_train, iris_train_pred)
summary(iris_svm2)
tic("svm_pred")
iris_svm_pred <- predict(iris_svm, iris_test)
(toc_pred <- toc())
table(pred, iris_train_pred)
iris_svm_pred <- predict(iris_svm, iris_train)
table(pred, iris_train_pred)
table(iris_svm_pred, iris_train_pred)
iris_svm_tune <- tune(svm, train.x = iris_train,
train.y = iris_train_pred,
kernel = "radial",
ranges = list(cost = 10^ (-1:2) gamma = c(.5,1,2)))
iris_svm_tune <- tune(svm, train.x = iris_train,
train.y = iris_train_pred,
kernel = "radial",
ranges = list(cost = 10^ (-1:2), gamma = c(.5,1,2)))
print(iris_svm_tune
print(iris_svm_tune)
print(iris_svm_tune)
summary(iris_svm_tune)
summary(iris_svm)
summary(iris_svm2)
summary(iris_svm_tune)
print(iris_svm_tune)
print(iris_svm)
print(iris_svm)
print(iris_svm_tune)
print(iris_svm2)
print(iris_svm2)
print(iris_svm_tune)
iris_svm2_tune <- svm(Species~., data = iris_train, kernel = "radial"
, cost =1
, gamma = .5)
iris_svm2_tune <- svm(species~., data = iris_train, kernel = "radial"
, cost =1
, gamma = .5)
iris_svm2_tune <- svm(Species ~., data = iris_train, kernel = "radial"
, cost =1
, gamma = .5)
iris_train <- iris[1:n]
iris_train_pred <- iris[1:n, 5]
iris_test <- iris[ (n+1): nrow(iris), -5]
str(iris)
